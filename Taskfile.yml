version: "3"

set: [errexit, nounset]

vars:
  DATA_HOME: { sh: "echo ${XDG_DATA_HOME:-~/.local/share}" }
  CONFIG_HOME: { sh: "echo ${XDG_CONFIG_HOME:-~/.config}" }

  FNF_DATA_DIR: "{{.DATA_HOME}}/fnf"
  FNF_CONFIG_DIR: "{{.CONFIG_HOME}}/fnf"

  # WIN_USER_PROFILE: { sh: 'wslpath $(pwsh.exe -Command ''[Environment]::GetFolderPath("UserProfile")'')' }
  # WIN_USER_PROFILE: { sh: 'cd /mnt/c && wslpath $(cmd.exe /C "echo %USERPROFILE%")' } # cd part is just to suppress warning from WSL or cmd.exe of this is not run from windows path
  INSTALL_DIR: { sh: "echo ${HOME}/.local/bin" }
  TASKFILE_VERSION: v3.43.3
  MISE_VERSION: 2025.6.5
  OH_MY_POSH_VERSION: v25.23.0
  GO_VERSION: 1.24.2
  NVM_VERSION: v0.40.3
  NODE_VERSION: v22.17.1
  LAZYGIT_VERSION: 0.50.0
  LAZYDOCKER_VERSION: 0.24.1
  K9S_VERSION: v0.50.5
  GOLANGCI_LINT_VERSION: 2.1.6

silent: true

tasks:
  default:
    deps: [setup, sync]

  setup:
    desc: Setup all.
    cmds:
      - "[ -d {{.INSTALL_DIR}} ] || mkdir -p {{.INSTALL_DIR}}"
      # - task: setup:webi
      - task: setup:mise
      - task: setup:dev

  setup:taskfile:
    cmds:
      - echo "Installing Taskfile {{.TASKFILE_VERSION}}"
      - curl -LSs https://github.com/go-task/task/releases/download/{{.TASKFILE_VERSION}}/task_linux_amd64.tar.gz | tar -C {{.INSTALL_DIR}} -xz task
    status: ['[ "v$(task --version)" = "{{.TASKFILE_VERSION}}" ]']

  setup:webi:
    cmd: curl -sS https://webi.sh/webi | sh
    status: [webi]

  setup:mise:
    env:
      MISE_VERSION: "{{.MISE_VERSION}}"
      MISE_INSTALL_PATH: "{{.INSTALL_DIR}}/mise"
    cmd: curl https://mise.run | sh
    status: ['[ "$(${MISE_INSTALL_PATH} version --quiet | tail | awk ''{print $1}'')" = "${MISE_VERSION}" ]']

  setup:dev:
    deps:
      # - task: setup:apt
      - task: setup:tools
      - task: setup:go
      - task: setup:node
      - task: setup:config
    cmds:
      - task: setup:oh-my-zsh
      - task: setup:oh-my-posh

  setup:apt:
    cmds:
      - task: _apt
        vars:
          LIST:
            - zsh
            - ripgrep

  setup:config:
    cmds:
      - "[ -d {{.FNF_CONFIG_DIR}}/current ] || mkdir -p {{.FNF_CONFIG_DIR}}/current"

      # Set up defaults
      - "[ -d {{.FNF_CONFIG_DIR}}/current/theme ] || ln -snf {{.FNF_DATA_DIR}}/themes/catppuccin-macchiato {{.FNF_CONFIG_DIR}}/current/theme"

      - "[ -d {{.CONFIG_HOME}}/btop/themes ] || mkdir -p {{.CONFIG_HOME}}/btop/themes"
      - "[ -f {{.CONFIG_HOME}}/btop/themes/current.theme ] || ln -snf {{.FNF_DATA_DIR}}/themes/catppuccin-macchiato/btop.theme {{.CONFIG_HOME}}/btop/themes/current.theme"

  _apt:
    requires:
      vars:
        - LIST
    vars:
      PACKAGES: '{{join " " .LIST}}'
    cmds:
      - echo "Installing {{.PACKAGES}}"
      - sudo apt install -qqy {{.PACKAGES}}
    internal: true

  setup:zsh:
    cmds:
      - sudo apt install -qqy zsh
      - defer: echo "Changing default shell to zsh" && chsh -s $(which zsh)
    status: [zsh --version]

  setup:oh-my-zsh:
    deps: [setup:zsh]
    cmds:
      - echo "Installing oh-my-zsh"
      - sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
    status: ["test -d ${HOME}/.oh-my-zsh"]

  setup:oh-my-posh:
    cmds:
      - echo "Installing oh-my-posh {{.OH_MY_POSH_VERSION}}"
      - curl -s https://ohmyposh.dev/install.sh | bash -s -- -d {{.INSTALL_DIR}} -v {{.OH_MY_POSH_VERSION}}
    status:
      - '[ "v$(oh-my-posh version)" = "{{.OH_MY_POSH_VERSION}}" ]'

  setup:go:
    cmds:
      - echo "Removing /usr/local/go if any"
      - sudo rm -rf /usr/local/go
      - echo "Installing go {{.GO_VERSION}}"
      - curl -LSs https://go.dev/dl/go{{.GO_VERSION}}.linux-amd64.tar.gz | sudo tar -C /usr/local -xz
    status:
      - '[ $(go version | awk ''{print $3}'' | sed ''s/^go//'') = "{{.GO_VERSION}}" ]'

  setup:node:
    deps: [setup:nvm]
    cmd: |
      echo "!!! MANUAL SETUP !!!
      Run the following command:

      nvm install {{.NODE_VERSION}} && nvm use {{.NODE_VERSION}}"
    status:
      - '[ $(node --version) = "{{.NODE_VERSION}}" ]'

  setup:nvm:
    cmds:
      - echo "Installing nvm {{.NVM_VERSION}}"
      - mkdir -p ${HOME}/.nvm
      - curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/{{.NVM_VERSION}}/install.sh | bash
    status:
      - 'test -n "${NVM_DIR}"'
      - 'test -d "${NVM_DIR}"'

  setup:tools:
    deps:
      - task: _tool:task
        vars:
          VERSION: "{{.TASKFILE_VERSION}}"
          STATUS: '[ "v$(task --version)" = "{{.TASKFILE_VERSION}}" ]'
          DOWNLOAD_URL: https://github.com/go-task/task/releases/download/{{.TASKFILE_VERSION}}/task_linux_amd64.tar.gz
      - task: _tool:lazygit
        vars:
          VERSION: "{{.LAZYGIT_VERSION}}"
          STATUS: '[ $(lazygit --version | awk ''{print $6}'' | sed -E ''s/^version=(.*),/\1/'') = "{{.LAZYGIT_VERSION}}" ]'
          DOWNLOAD_URL: https://github.com/jesseduffield/lazygit/releases/download/v{{.LAZYGIT_VERSION}}/lazygit_{{.LAZYGIT_VERSION}}_Linux_x86_64.tar.gz
      - task: _tool:lazydocker
        vars:
          VERSION: "{{.LAZYDOCKER_VERSION}}"
          STATUS: '[ $(lazydocker --version | head -n 1 | awk ''{print $2}'') = "{{.LAZYDOCKER_VERSION}}" ]'
          DOWNLOAD_URL: https://github.com/jesseduffield/lazydocker/releases/download/v{{.LAZYDOCKER_VERSION}}/lazydocker_{{.LAZYDOCKER_VERSION}}_Linux_x86_64.tar.gz
      - task: _tool:k9s
        vars:
          VERSION: "{{.K9S_VERSION}}"
          STATUS: '[ $(k9s version --short | head -n 1 | awk ''{print $2}'') = "{{.K9S_VERSION}}" ]'
          DOWNLOAD_URL: https://github.com/derailed/k9s/releases/download/{{.K9S_VERSION}}/k9s_Linux_amd64.tar.gz
      - task: _tool:golangci-lint
        vars:
          VERSION: "{{.GOLANGCI_LINT_VERSION}}"
          STATUS: '[ $(golangci-lint --version | awk ''{print $4}'') = "{{.GOLANGCI_LINT_VERSION}}" ]'
          DOWNLOAD_URL: https://github.com/golangci/golangci-lint/releases/download/v{{.GOLANGCI_LINT_VERSION}}/golangci-lint-{{.GOLANGCI_LINT_VERSION}}-linux-amd64.tar.gz
          STRIP_COMPONENTS: 1
          DIR: golangci-lint-{{.GOLANGCI_LINT_VERSION}}-linux-amd64

  _tool:*:
    requires:
      vars:
        - VERSION
        - STATUS
        - DOWNLOAD_URL
    vars:
      TOOL: "{{index .MATCH 0}}"
    label: _tool:{{.TOOL}}
    cmds:
      - echo "Installing {{.TOOL}} {{.VERSION}} to {{.INSTALL_DIR}}"
      - curl -LSs {{.DOWNLOAD_URL}} |
        tar
        {{- if .STRIP_COMPONENTS}} --strip-components={{.STRIP_COMPONENTS}}{{- end}}
        -C {{.INSTALL_DIR}}
        -xz
        {{- if .DIR}}
        {{.DIR}}/{{.TOOL}}
        {{- else}}
        {{.TOOL}}
        {{- end}}
    status: ["{{.STATUS}}"]

  sync:
    desc: Sync all configurations.
    deps:
      - task: _sync:k9s
      - task: _sync:zsh
      - task: _sync:zellij
      - task: _sync:lazygit
      - task: _sync:lazydocker
      - task: _sync:oh-my-posh
      - task: _sync:nvim
      - task: _sync:tmux
      - task: _sync:kitty
      - task: _sync:hypr
      - task: _sync:uwsm
      - task: _sync:fontconfig
      - task: _sync:waybar
      - task: _sync:wofi
      - task: _sync:ghostty
      - task: _sync:swaync
      - task: _sync:rofi
      - task: _sync:alacritty
        vars: { DIR: "~" }
      - task: _syncfile:.config/walker/config.toml
        vars: { DIR: "~" }
      - task: _syncfile:.config/walker/themes/default.css
        vars: { DIR: "~" }
      - task: _syncfile:.config/walker/themes/macchiato.css
        vars: { DIR: "~" }
      - task: _syncfile:.config/walker/themes/macchiato.toml
        vars: { DIR: "~" }
      # - task: _sync:nvim
      #   vars: { DIR: "{{.WIN_USER_PROFILE}}/AppData/Local" }
      # - task: _sync:WindowsPowerShell
      #   vars: { DIR: "{{.WIN_USER_PROFILE}}/Documents" }
      # - task: _sync:PowerShell
      #   vars: { DIR: "{{.WIN_USER_PROFILE}}/Documents" }
      # - task: _sync:komorebi
      #   vars: { DIR: "{{.WIN_USER_PROFILE}}/.config" }
      # - task: _sync:yasb
      #   vars: { DIR: "{{.WIN_USER_PROFILE}}/.config" }
      # - task: _sync:alacritty
      #   vars: { DIR: "{{.WIN_USER_PROFILE}}/AppData/Roaming" }
      - task: _syncfile:.zshrc
        vars: { DIR: { sh: "echo ${HOME}" } }
      - task: _syncfile:.inputrc
        vars: { DIR: { sh: "echo ${HOME}" } }
      - task: _syncfile:.bash_profile
        vars: { DIR: { sh: "echo ${HOME}" } }
      # - task: _syncfile:.inputrc
      #   vars: { DIR: "{{.WIN_USER_PROFILE}}" }
      # - task: _syncfile:.config/whkdrc
      #   vars: { DIR: "{{.WIN_USER_PROFILE}}" }
      - task: _sync:bin
        vars:
          DIR: "{{.FNF_DATA_DIR}}"
          SRC: "{{.ROOT_DIR}}/.local/share/bin/"
      - task: _sync:themes
        vars:
          DIR: "{{.FNF_DATA_DIR}}"
          SRC: "{{.ROOT_DIR}}/themes/"
      - task: _sync:applications
        vars:
          DIR: "{{.DATA_HOME}}"
          SRC: "{{.ROOT_DIR}}/.local/share/applications/"
          DELETE: "0"
      - task: _sync:icons
        vars:
          DIR: "{{.DATA_HOME}}"
          SRC: "{{.ROOT_DIR}}/.local/share/icons/"
          DELETE: "0"

  _sync:*:
    vars:
      CONFIG: "{{index .MATCH 0}}"
      DIR: "{{.DIR | default .CONFIG_HOME}}"
      SRC: '{{.SRC | default (printf "%s/.config/%s/" .ROOT_DIR .CONFIG)}}'
      DELETE: '{{.DELETE | default "1"}}'
    label: _sync:{{.CONFIG}}
    cmds:
      - echo "Syncing configuration for {{.CONFIG}} to {{.DIR}}/{{.CONFIG}}/"
      - rsync
        --quiet
        --recursive
        {{if eq .DELETE "1"}}
        --delete
        {{end}}
        --mkpath
        {{.SRC}}
        {{.DIR}}/{{.CONFIG}}/
    internal: true
    ignore_error: true

  _syncfile:*:
    requires:
      vars: [DIR]
    vars:
      FILE: "{{index .MATCH 0}}"
    label: _syncfile:{{.FILE}}
    cmds:
      - echo "Syncing {{.FILE}} to {{.DIR}}/{{.FILE}}"
      - rsync --quiet {{.ROOT_DIR}}/{{.FILE}} {{.DIR}}/{{.FILE}}
    internal: true
    ignore_error: true
